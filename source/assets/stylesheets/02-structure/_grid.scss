// ------------------------------------------------------------------------------
// Table of Contents
//
//  - Rows
//  - Columns
//  - Grid Layout
//  - Grid Utilities
//
// ------------------------------------------------------------------------------

// ------------------------------------------------------------------------------
// !-- Rows
// ------------------------------------------------------------------------------

.row {
  @include clearfix;
  margin: 0 (map-get($grid, margin) * -1);
}

.row--narrowSpaced {
  margin-bottom: $verticalRhythm;
}

.row--spaced {
  margin-bottom: $verticalRhythm * 2;
}

.row--flex {
  @include respond-to(small) {
    display: flex;
    align-items: stretch;
  }
}

.row--flex--column--reverse {
  display: flex;
  flex-direction: column-reverse;
}

.row--medium--block {
  @include respond-to(medium) {
    display: block;
  }
}

.row--background-image {
  background-repeat: no-repeat;

  &--bottom-right {
    background-position: bottom right;
  }
}

// ------------------------------------------------------------------------------
// !-- Columns
// ------------------------------------------------------------------------------

.column,
.columns {
  float: left;
  width: 100%;
  margin-bottom: $verticalRhythm;
  padding-right: map-get($grid, margin);
  padding-left: map-get($grid, margin);
  position: relative;
}

@include respond-to(small) {
  .column--noMargin,
  .columns--noMargin {
    margin-bottom: 0;
  }
}


// -----------------------------------------------------------------------------
// !-- Grid Layout
// -----------------------------------------------------------------------------

// Generate grid classes for the number of columns set in the $grid variable map
@for $span from 1 through map-get($grid, columns) {
  .l--#{$span} {
    @include grid-span($span);
  }
}

// Generate grid classes based on breakpoints

// Loop through each breakpoint from the $breakpoints variable map
@each $breakpointName, $breakpoint in $breakpoints {
  // Use respond-to mixin to build grid based on breakpoints
  @include respond-to($breakpointName) {
    // Create each grid class for each breakpoint
    @for $span from 1 through map-get($grid, columns) {
      .l--#{$breakpointName}--#{$span} {
        @include grid-span($span);
      }
    }
  }
}

/*doc
---
title: Grid
name: grid
category: Structure - Grid
---

First add a `row` class. Inside of that you can include
the necessary column classes (i.e. `l--*--*`) to create the
grid you need. You can chain classes together to alter the
grid structure at particular widths. Start small and work
larger. See the examples below. And make sure to include the
`column` or `columns` class at the end of the chain. This
adds some generic styles no matter the grid structure.

_Note: Do **not** copy the `sg--grid` class, as that is just for
styleguide styling._

``` html_example

<p>Row One</p>
<div class="row">
  <div class="l--small--3 l--medium--6 l--large--4 l--extraLarge--12 columns sg--grid">
    Column 1
  </div>
  <div class="l--small--3 l--medium--2 l--large--4 columns sg--grid">
    Column 2
  </div>
  <div class="l--small--6 l--medium--4 l--large--4 columns">
    <div class="row">
      <div class="l--small--6 columns sg--grid">
        Nest 1
      </div>
      <div class="l--small--6 columns sg--grid">
        Nest 2
      </div>
    </div>
  </div>
</div>
<p>Row 2</p>
<div class="row">
  <div class="l--small--12 l--medium--4 l--extraLarge--2 columns sg--grid">
    Column 1
  </div>
  <div class="l--small--12 l--medium--4 l--extraLarge--2 columns sg--grid">
    Column 2
  </div>
  <div class="l--small--12 l--medium--4 l--extraLarge--8 columns sg--grid">
    Column 3
  </div>
</div>

```

You can change the column ordering at particular widths by using a combination of push and pull classes

 ``` html_example

<p>Row</p>
<div class="row">
  <div class="l--medium--6 columns l--medium--push--6 sg--grid">
    Column 1
  </div>
  <div class="l--medium--6 columns l--medium--pull--6 sg--grid">
    Column 2
  </div>
</div>
 ```

 You can add column offsets at particular widths by using the relevant offset class

 ``` html_example

<p>Row</p>
<div class="row">
  <div class="l--medium--6 columns l--medium--offset--6 sg--grid">
    Column 1
  </div>
  <div class="l--medium--6 columns l--medium--pull--6 sg--grid">
    Column 2
  </div>
</div>
 ```
*/

// ------------------------------------------------------------------------------
// !-- Grid Utilities
// ------------------------------------------------------------------------------

.l--centered {
  text-align: center;
}

.l--centeredColumn {
  float: none;
  margin: 0 auto;
}

.l--pullRight {
  float: right;
}

.l--noMargin {
  margin: 0;
}

.l--noPad {
  padding: 0;
}

.l--mobileMargin {
  margin-bottom: $verticalRhythm;

  @include respond-to(small) {
    margin-bottom: 0;
  }
}

.l--mediumMargin {
  margin-bottom: 0;
  @include respond-to(large){
    margin-bottom: $verticalRhythm;
  }
}

@each $breakpointName, $breakpoint in $breakpoints {
  @include respond-to($breakpointName) {
    @for $span from 1 through map-get($grid, columns) {
      .l--#{$breakpointName}--pull--#{$span} {
        @include grid-pull($span);
      }
    }
  }
}

@each $breakpointName, $breakpoint in $breakpoints {
  @include respond-to($breakpointName) {
    @for $push from 1 through map-get($grid, columns) {
      .l--#{$breakpointName}--push--#{$push} {
        @include grid-push($push);
      }
    }
  }
}

@each $breakpointName, $breakpoint in $breakpoints {
  @include respond-to($breakpointName) {
    @for $offset from 0 through map-get($grid, columns) {
      .l--#{$breakpointName}--offset--#{$offset} {
        @include grid-offset($offset);
      }
    }
  }
}
